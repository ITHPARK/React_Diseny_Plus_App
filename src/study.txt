### Axios?

Axios는 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리.
(백엔드랑 프론트엔드랑 통신을 쉽게하기 위해 Ajax오 더불어 사용 .)


### Styled Components?
Styled Components란 Css-in-JS라고 하는 Javascript 파일 안에서 CSS를 처리 할 수 있게 해주는 대표적인 라이브러리

예시 코드1)

const Title = styled.h1`
    font-size: 1.5rem;
    text-align: center;
    color: red;
`

Title 이라는 컴포넌트를 생성. Title 컴포넌트는 h1 태그를 출력하고  h1 태그에는 아래의 스타일이 적용된다.
props전달도 가능

예시 코드2)

const Button = styled.button `
    background: ${props => props.primary? "red" : "white"};
    color: ${props => props.primary? "white" : "red"};
`

render (
    <div>
        <Button>Normal</Button> 
        <Button primary >Primary</Button> 
    </div>
)

컴포넌트에 props도 전달이 가능하다. 조건문을 활용하여 primary라는 props가 있으면 red 배경에 white 폰트색상을 적용함

*Extending Styles 클래스를 확장하듯이 컴포넌트 상속을 해준다.

예시 코드3)

const Button = styled.button `
    background: ${props => props.primary? "red" : "white"};
    color: ${props => props.primary? "white" : "red"};
`
const TomatoButton = styled{Button} `
    color: tomato;
    background-color: tomato;
`
TomatoButton 컴포넌트에 Button 컴포넌트 상속. 상속 받았는데 겹치는 속성이 있으면 새롭게 재정의 함 



### React Router 

roter를 사용하여 리액트의 컴포넌트의 경로를 설정 해줄 수 있음

기본 구조) 
<BrowserRouter>
    <Routes>
        <Route path="/" element={<App/>} />
    </Route>
</BrowserRouter>

path = 브라우저에 렌더링되는 리액트 경로. (/로 입력시 페이지 열었을 떄 가장 먼저나오는 페이지가 됨.)
element = 렌더링 할 컴포넌트.


중첩 라우팅

구조) 
<BrowserRouter>
    <Routes>
        <Route path="/" element={<App/>} >
            <Route index element={<Home/>} />
            <Route path="teams" element={<Teams/>} >
                <Routes path=":teamId" element={<Team/>} />
                <Route path="new" element={<NewTeamForm/>} />
                <Route index element={<LeagurStandings/>} />
            </Route>
        </Route>
    </Routes>
</BrowserRouter>

리액트의 자식 컴포넌트로써 묶어 줄수도 있다.
<Route index element={<Home/>} /> 같이 Route안에 index가 있는것은 상위 경로 컴포넌트와 같이 렌더링되는 것이다.
Home컴포넌트는 App컴포넌트와 같이 출력되며 경로는 localhost:3000/( App컴포넌트는 기본경로이므로 )에 App과 Home 컴포넌트가 같이 렌더링 된다.

 <Route path=":teamId" element={<Team/>} />의 path=":teamId" 경우 teamId 값을 1,22,31,4 처럼 따로 정해줄 수 있다. 


-Outlet

자식 경로 요소를 렌더링 할 때 부모 경로 요소에서 Outlet을 사용해줘야한다. 그렇지 않으면 중첩된 UI가 렌더링 될 수 있다.
부모 라우트가 정확히 일치하면 자식 인덱스 라우트를 렌더링하거나 인덱스 라우트가 없으면 아무것도 렌더링 하지 않는다.
react-route-dom에서 가져와 사용한다.

예시 코드 )

function App () {
    return (
        <div>
            <h1>App</h1>
            <div>
                <Outlet/> <= 여기에 App 라우트의 모든 자식 라우트들이 들어가게됨.
            </div>
        </div>
    )
}


-usePramse 

:style 문법을 path 경로에 사용하였다면 useParmse()로 읽을 수 있다.
:invoiceId를 알기 위해서 useParams

function App () {
    return (
    <Routes>
        <Route
            path="invoices/:invoiceId"
            element= {<Invoice />}
         />
    </Routes>
    )
}

function Invoice () {
    let params = useParmse();
    return <h1> Invoice {params.invoiceId} </h1>
}


### useDebounce

debounce function은 사용자가 미리 결정된 시간 동안 타이핑을 멈출 때 까지 keyup 이벤트 처리를 지연시킴.
이 함수를 사용함으로써 입력을 할 때 불필요한 호출을 줄일 수 있다.